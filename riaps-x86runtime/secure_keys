#!/usr/bin/python3
'''
Script for managing security keys in RIAPS systems
Created on March 20, 2019
Arguments:
    optional argument:
    - ``-H | --hosts hostnames``:  list of hostnames (comma separated), VM will be rekeyed
    - ``-R | --roles rolenames``:  list of roles (comma separated)
    - ``-f riaps-hosts.conf``   :  absolute path to a conf file containing desired host_string
    - ``-A hostnames``          :  list of hostnames (comma separated) to be added, VM will not bet rekeyed
    - ``-i identity file``      :  absolute path to a private key file used in an extant RIAPS system
    - ``-p | --passwd ``        :  keep password enabled on remote nodes

If specific hostnames are not given, the command will be called for all hosts
listed in /etc/riaps/riaps_hosts.conf
@author: timkrentz
'''

import os
import sys
import shlex
import argparse
import site
import subprocess


def bash(cmd):
    t = shlex.split(cmd)
    print("=== "+str(t))
    result = subprocess.run(t)
    return result

def openKeyPerms():
    #temporarily open private key and certs, so that they can be moved to new RIAPS nodes
    if os.path.isfile('/home/riaps/.ssh/id_rsa.key'):
        bash('sudo chmod 444 /home/riaps/.ssh/id_rsa.key')
    if os.path.isfile('/home/riaps/.ssh/x509.pem'):
        bash('sudo chmod 444 /home/riaps/.ssh/x509.pem')

def closeKeyPerms():
    #return tighter restrictions to private key and certs
    if os.path.isfile('/home/riaps/.ssh/id_rsa.key'):
        bash('sudo chmod 400 /home/riaps/.ssh/id_rsa.key')
    if os.path.isfile('/home/riaps/.ssh/x509.pem'):
        bash('sudo chmod 400 /home/riaps/.ssh/x509.pem')

def rekey_VM():
    #save old keys and certs
    if os.path.isfile('/home/riaps/.ssh/id_rsa.pub'):
        bash('ssh-add -d /home/riaps/.ssh/id_rsa.pub')
        os.rename('/home/riaps/.ssh/id_rsa.pub', '/home/riaps/.ssh/id_rsa.pub.old')

    if os.path.isfile('/home/riaps/.ssh/id_rsa.key'):
        os.rename('/home/riaps/.ssh/id_rsa.key', '/home/riaps/.ssh/id_rsa.key.old')

    if os.path.isfile('/home/riaps/.ssh/riaps-sys.cert'):
        os.rename('/home/riaps/.ssh/riaps-sys.cert', '/home/riaps/.ssh/riaps-sys.cert.old')

    if os.path.isfile('/home/riaps/.ssh/x509.pem'):
        os.rename('/home/riaps/.ssh/x509.pem', '/home/riaps/.ssh/x509.pem.old')

    #generate new keys and certs
    bash('riaps_gen_cert -o /home/riaps/.ssh')
    bash('chmod 400 /home/riaps/.ssh/id_rsa.key')

    #never used key
    bash('rm /home/riaps/.ssh/riaps.key')

    #add private key to ssh agent for immediate use
    bash('ssh-add /home/riaps/.ssh/id_rsa.key')

    #generate public key from private key, riaps_gen_cert creates a PEM/OpenSSH formated public key
    #  which does not work well with ssh-add
    subprocess.run('ssh-keygen -y -f /home/riaps/.ssh/id_rsa.key > /home/riaps/.ssh/id_rsa.pub',shell=True)

    #add public key to authorized keys (to allow deploy to work on VM)
    subprocess.run('cat /home/riaps/.ssh/id_rsa.pub >> /home/riaps/.ssh/authorized_keys',shell=True)

    #copy keys and certs to riaps/keys location
    c = [
        'sudo cp /home/riaps/.ssh/id_rsa.key /etc/riaps/.',
        'sudo chown root:riaps /etc/riaps/id_rsa.key',
        'sudo chmod 440 /etc/riaps/id_rsa.key',
        'sudo rm -f /usr/local/riaps/keys/id_rsa.key',
        'sudo ln -s /etc/riaps/id_rsa.key /usr/local/riaps/keys/id_rsa.key',
        'sudo cp /home/riaps/.ssh/id_rsa.pub /etc/riaps/.',
        'sudo chown root:riaps /etc/riaps/id_rsa.pub',
        'sudo chmod 440 /etc/riaps/id_rsa.pub',
        'sudo rm -f /usr/local/riaps/keys/id_rsa.pub',
        'sudo ln -s /etc/riaps/id_rsa.pub /usr/local/riaps/keys/id_rsa.pub',
        'sudo cp /home/riaps/.ssh/riaps-sys.cert /etc/riaps/.',
        'sudo chown root:riaps /etc/riaps/riaps-sys.cert',
        'sudo chmod 444 /etc/riaps/riaps-sys.cert',
        'sudo chmod 444 /home/riaps/.ssh/riaps-sys.cert',
        'sudo rm -f /usr/local/riaps/keys/riaps-sys.cert',
        'sudo ln -s /etc/riaps/riaps-sys.cert /usr/local/riaps/keys/riaps-sys.cert',
        'sudo cp /home/riaps/.ssh/x509.pem /etc/riaps/.',
        'sudo chown root:riaps /etc/riaps/x509.pem',
        'sudo chmod 440 /etc/riaps/x509.pem',
        'sudo chmod 440 /home/riaps/.ssh/x509.pem',
        'sudo rm -f /usr/local/riaps/keys/x509.pem',
        'sudo ln -s /etc/riaps/x509.pem /usr/local/riaps/keys/x509.pem',
    ]
    for cmd in c:
        bash(cmd)

    print("rekeyed development machine with newly generated keys and certificates.")


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-H", "--hosts", default="", help="list of hostnames, comma separated, for a complete reconfiguration")    # List of hostnames to used instead of system configured file
    parser.add_argument("-R", "--roles", default="", help="list of roles, comma separated")
    parser.add_argument("-f", dest='hostsFile', help="absolute path to riaps-hosts.conf")
    parser.add_argument("-A", dest='addtlHosts', help="list of hostnames, comma separated, to add to a current configuration")
    parser.add_argument("-i", dest='keyFile', help="absolute path to pre-established RIAPS private key")
    parser.add_argument("-v", "--validate", action='store_const', const=True, help="validate host names")
    parser.add_argument("-p", "--passwd", action='store_true', help="keep password for remote nodes")
    args = parser.parse_args()

    fcmd = "fab"
    fflag = "-f"
    fpath = [p + "/riaps/" for p in site.getsitepackages()] + [os.getenv('RIAPSHOME')]
    rekeyVM = True
    if args.hosts:
        fhosts = ("--hosts=" + args.hosts)
    elif args.addtlHosts:
        fhosts = ("--hosts=" + args.addtlHosts)
        # Do not rekey VM if just adding additional hosts
        rekeyVM = False
    else:
        fhosts = ""
    froles = ("--roles=" + args.roles) if args.roles else ""
    fhostsFile = ("--set hostsFile=" + args.hostsFile) if args.hostsFile else ""
    fident = "-i "+ args.privateKeyPath \
                        if args.privateKeyPath and os.path.isfile(args.privateKeyPath) else ""

    fvalidate = "--set validate" if args.validate else ""
    fsyscheck = "sys.check"
    fupdate = "riaps.updateNodeKey:%s" % args.passwd

    fpath = None
    for p in fpaths:
        if p is None: continue
        fp = os.path.join(p,"fabfile","")
        if os.path.isdir(fp):
            fpath = fp; break

    if fpath is not None:
        # Make sure RIAPS nodes are available first
        print("Validating host availability: {}".format(args.hosts))
        cmd = str.join(' ',(fcmd, fflag, fpath, fsyscheck, fhostsFile, fhosts, froles, fvalidate, fident))
        p = bash(cmd)
        if p.returncode != 0:
            print("Unable to find hosts, aborting update process now ...")
            sys.exit(-1)

        if rekeyVM:
            print("Rekeying VM")
            rekey_VM()

        # Rekey remote hosts
        print("Rekeying hostnames: {}".format(args.hosts))
        cmd = str.join(' ',(fcmd, fflag, fpath, fupdate, fhostsFile, fhosts, froles, fvalidate, fident))
        bash('ssh-add /home/riaps/.ssh/id_rsa.key.old')
        openKeyPerms()
        bash(cmd)
        closeKeyPerms()
        bash('ssh-add -d /home/riaps/.ssh/id_rsa.pub.old')
        print("Rekeyed remote RIAPS nodes with development machine keys and certificates.")
    else:
        print('RIAPS Fabfile is not installed, please update the riaps-pycom installation.')
