#!/usr/bin/python3
'''
Script for managing security keys in RIAPS systems
Created on March 20, 2019
Arguments:
    optional argument:
    - ``-H | --hosts hostnames``:  list of hostnames (comma separated), VM will be rekeyed
    - ``-R | --roles rolenames``:  list of roles (comma separated)
    - ``-f riaps-hosts.conf``   :  absolute path to a conf file containing desired host_string
    - ``-A hostnames``          :  list of hostnames (comma separated) to be added, VM will not bet rekeyed
    - ``-i identity file``      :  absolute path to a private key file used in an extant RIAPS system
    - ``-p | --passwd ``        :  keep password enabled on remote nodes
If specific hostnames are not given, the command will be called for all hosts
listed in /etc/riaps/riaps_hosts.conf
@author: timkrentz
'''

import os
import sys
import shlex
import argparse
import site
import subprocess

pycom_privateKey = 'id_rsa.key'
pycom_publicKey = 'id_rsa.pub'
pycom_cert = 'x509.pem'
pycom_zmqCert = 'riaps-sys.cert'
pycom_keys_dir = '/etc/riaps'
pycom_ln_dir = '/usr/local/riaps/keys'

vm_privateKey = 'id_rsa'
vm_publicKey = pycom_publicKey
vm_keys_dir = '/home/riaps/.ssh'


def bash(cmd):
    t = shlex.split(cmd)
    print("=== "+str(t))
    result = subprocess.run(t)
    return result

def openKeyPerms():
    #temporarily open private key and certs on VM, so that they can be moved to new RIAPS nodes
    #note: private key name of 'id_rsa' used on VM, instead of id_rsa.key to allow automatic inclusion in ssh setup
    #      riaps-pycom uses 
    if os.path.isfile(f'{vm_keys_dir}/{vm_privateKey}'):
        bash(f'sudo chmod 444 {vm_keys_dir}/{vm_privateKey}')
    if os.path.isfile(f'{vm_keys_dir}/{pycom_cert}'):
        bash(f'sudo chmod 444 {vm_keys_dir}/{pycom_cert}')

def closeKeyPerms():
    #return tighter restrictions to private key and certs
    if os.path.isfile(f'{vm_keys_dir}/{vm_privateKey}'):
        bash(f'sudo chmod 400 {vm_keys_dir}/{vm_privateKey}')
    if os.path.isfile(f'{vm_keys_dir}/{pycom_cert}'):
        bash(f'sudo chmod 400 {vm_keys_dir}/{pycom_cert}')

def rekey_VM():
    #save old keys and certs
    if os.path.isfile(f'{vm_keys_dir}/{vm_publicKey}'):
        # bash(f'ssh-add -d {vm_keys_dir}/{vm_publicKey}')
        os.rename(f'{vm_keys_dir}/{vm_publicKey}', f'{vm_keys_dir}/{vm_publicKey}.old')

    if os.path.isfile(f'{vm_keys_dir}/{vm_privateKey}'):
        os.rename(f'{vm_keys_dir}/{vm_privateKey}', f'{vm_keys_dir}/{vm_privateKey}.old')

    if os.path.isfile(f'{vm_keys_dir}/{pycom_zmqCert}'):
        os.rename(f'{vm_keys_dir}/{pycom_zmqCert}', f'{vm_keys_dir}/{pycom_zmqCert}.old')

    if os.path.isfile(f'{vm_keys_dir}/{pycom_cert}'):
        os.rename(f'{vm_keys_dir}/{pycom_cert}', f'{vm_keys_dir}/{pycom_cert}.old')

    #generate new keys and certs
    #privateKey name is id_rsa for VM and id_rsa.key for riaps-pycom, so keep id_rsa.key until remote nodes are updated
    bash(f'riaps_gen_cert -o {vm_keys_dir}')
    bash(f'cp {vm_keys_dir}/{pycom_privateKey} {vm_keys_dir}/{vm_privateKey}')
    bash(f'chmod 400 {vm_keys_dir}/{vm_privateKey}')

    #never used key
    bash(f'rm {vm_keys_dir}/riaps.key')

    #add private key to ssh agent for immediate use
    # bash(f'ssh-add {vm_keys_dir}/{vm_privateKey}')

    #generate public key from private key, riaps_gen_cert creates a PEM/OpenSSH formated public key
    #  which does not work well with ssh-add
    subprocess.run(f'ssh-keygen -y -f {vm_keys_dir}/{vm_privateKey} > {vm_keys_dir}/{vm_publicKey}',shell=True)

    #add public key to authorized keys (to allow deploy to work on VM)
    subprocess.run(f'cat {vm_keys_dir}/{vm_publicKey} >> {vm_keys_dir}/authorized_keys',shell=True)

    #copy keys and certs to riaps/keys location
    c = [
        f'sudo cp {vm_keys_dir}/{vm_privateKey} {pycom_keys_dir}/{pycom_privateKey}',
        f'sudo chown root:riaps {pycom_keys_dir}/{pycom_privateKey}',
        f'sudo chmod 440 {pycom_keys_dir}/{pycom_privateKey}',
        f'sudo rm -f {pycom_ln_dir}/{pycom_privateKey}',
        f'sudo ln -s {pycom_keys_dir}/{pycom_privateKey} {pycom_ln_dir}/{pycom_privateKey}',
        f'sudo cp {vm_keys_dir}/{vm_publicKey} {pycom_keys_dir}/{pycom_publicKey}',
        f'sudo chown root:riaps {pycom_keys_dir}/{pycom_publicKey}',
        f'sudo chmod 440 {pycom_keys_dir}/{pycom_publicKey}',
        f'sudo rm -f {pycom_ln_dir}/{pycom_publicKey}',
        f'sudo ln -s {pycom_keys_dir}/{pycom_publicKey} {pycom_ln_dir}/{pycom_publicKey}',
        f'sudo cp {vm_keys_dir}/{pycom_zmqCert} {pycom_keys_dir}/{pycom_zmqCert}',
        f'sudo chown root:riaps {pycom_keys_dir}/{pycom_zmqCert}',
        f'sudo chmod 444 {pycom_keys_dir}/{pycom_zmqCert}',
        f'sudo chmod 444 {vm_keys_dir}/{pycom_zmqCert}',
        f'sudo rm -f {pycom_ln_dir}/{pycom_zmqCert}',
        f'sudo ln -s {pycom_keys_dir}/{pycom_zmqCert} {pycom_ln_dir}/{pycom_zmqCert}',
        f'sudo cp {vm_keys_dir}/{pycom_cert} {pycom_keys_dir}/{pycom_cert}',
        f'sudo chown root:riaps {pycom_keys_dir}/{pycom_cert}',
        f'sudo chmod 440 {pycom_keys_dir}/{pycom_cert}',
        f'sudo chmod 440 {vm_keys_dir}/{pycom_cert}',
        f'sudo rm -f {pycom_ln_dir}/{pycom_cert}',
        f'sudo ln -s {pycom_keys_dir}/{pycom_cert} {pycom_ln_dir}/{pycom_cert}',
    ]
    for cmd in c:
        bash(cmd)

    print("rekeyed development machine with newly generated keys and certificates.")



_help_hosts = "Hostname or IP address of node to secure (repeatable)"
_help_hostfile = "absolute path to riaps-hosts.conf"
_help_identity = "absolute path to RIAPS private key"
_help_password = "keep password for remote nodes"

_script_description = '''Generate new crypo keys and/or write keys to remote nodes
'''

_script_epilog = f'''=============================================
To generate new keys & write to remote nodes:
    ./secure_keys reset TARGETS OPTIONS

To write existing keys to remote nodes:
    ./secure_keys add TARGETS OPTIONS

    Where:
        TARGETS := -H HOST [-H HOST...]       | {_help_hosts}
                    or                        |
                   -f HOSTFILE                | {_help_hostfile}
                                              |
        OPTIONS := -i <path_to_private_key>   | {_help_identity}
                   -p, --passwd               | {_help_password}
'''


if __name__ == '__main__':
    try:
        import riaps.consts
    except ImportError as e:
        print("ERROR: Couldn't import riaps. Is riaps-pycom installed?")
        exit(-1)

    #TODO: Switch path args to those imported from riaps.consts
    #TODO: Test/verify passing hostfil

    parser = argparse.ArgumentParser(usage="./secure_keys [-h] (reset | add) [[-H HOST ...] | -f HOSTFILE] [-i PRIVATEKEYPATH] [-p | --passwd]",
                                     description=_script_description,
                                     epilog=_script_epilog,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('action',choices=['reset','add']) #TODO: Add "remove" option + logic
    hostgroup = parser.add_mutually_exclusive_group()
    hostgroup.add_argument("-H", dest='hosts', metavar="HOST", action='append', help=_help_hosts)    # List of hostnames to used instead of system configured files
    hostgroup.add_argument("-f", dest='hostfile', help=_help_hostfile)
    parser.add_argument("-i", dest='privateKeyPath', help=_help_identity)
    parser.add_argument("-p", "--passwd", action='store_true', help=_help_password)
    args = parser.parse_args()

    hosts = ' '.join([f"-H {h}" for h in args.hosts]) if args.hosts else ""
    rekeyVM = (args.action == 'reset')

    hostFile = ("--hostfile " + args.hostfile) if args.hostfile else ""
    ident = "-i "+ args.privateKeyPath \
                        if args.privateKeyPath and os.path.isfile(args.privateKeyPath) else ""
    keep_password = '--keep-password' if args.passwd else ""

    # Make sure RIAPS nodes are available first
    print("Validating host availability: {}".format(args.hosts))
    cmd = str.join(' ',("riaps_fab",hosts,hostFile,ident,"sys.check"))
    p = bash(cmd)
    if p.returncode != 0:
        print("Unable to find hosts, aborting update process now ...")
        sys.exit(-1)

    if rekeyVM:
        print("Rekeying VM")
        rekey_VM()
        if ident == "":
            ident = f'-i {vm_keys_dir}/{vm_privateKey}.old'

    # Rekey remote hosts
    print("Rekeying hostnames: {}".format(args.hosts))
    # cmd = str.join(' ',(fcmd, fflag, fpath, fupdate, fhostsFile, fhosts, froles, fvalidate, fident))
    cmd = str.join(' ',("riaps_fab",ident,hosts,hostFile,"riaps.updateNodeKey",keep_password))
    # bash(f'ssh-add {vm_keys_dir}/{vm_privateKey}.old')
    openKeyPerms()
    bash(cmd)
    closeKeyPerms()
    # bash(f'ssh-add -d {vm_keys_dir}/{vm_publicKey}.old')
    print("Rekeyed remote RIAPS nodes with development machine keys and certificates.")
    
    # Remove id_rsa.key (a copy of id_rsa) from VM no longer needed
    if rekeyVM:
        bash(f'rm {vm_keys_dir}/{pycom_privateKey}')
